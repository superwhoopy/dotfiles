# vim: set ft=zsh:

################################################################################
# UTILITY FUNCTIONS
################################################################################

function _iswin() {
  [ "${OS}" = "Windows_NT" ]
}
function _warnmsg() {
  printf "\033[1;33m%s\033[0m\n" "${*}"
}
function _errormsg() {
  printf "\033[1;31m%s\033[0m\n" "${*}"
}
function _command_exists() {
  command -v "${*}" &> /dev/null
}

################################################################################

# Path to your oh-my-zsh installation.
export ZSH="${HOME}/.oh-my-zsh"

# if oh-my-zsh is missing, install it
# TODO: use antigen some day?
if [ ! -d ${ZSH} ];
then
  _warnmsg "Installing oh-my-zsh…"
  sh -c \
    "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" \
    "" --unattended --keep-zshrc

  _warnmsg "Installing zsh-autosuggestions…"
  # install plugins
  git clone https://github.com/zsh-users/zsh-autosuggestions \
    ${ZSH}/plugins/zsh-autosuggestions
  _warnmsg "Installing zsh-syntax-highlighting…"
  git clone https://github.com/zsh-users/zsh-syntax-highlighting.git \
    ${ZSH}/plugins/zsh-syntax-highlighting
fi

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
unset ZSH_THEME

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder


# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(vi-mode colored-man-pages zsh-syntax-highlighting zsh-autosuggestions)

_iswin || plugins+=(direnv)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# disable XON/XOFF
stty -ixon

bindkey '^C' send-break
autoload -U compinit && compinit -u

# load aliases
function () {
  local _aliases=${HOME}/.aliases
  [ -f ${_aliases} ] && source ${_aliases}
}

# On Windows, .zshenv is evaluated before MSYS2 populates PATH with
# /usr/local/bin amd /mingw64/bin: update the PATH here to have scoop apps first
# in the PATH
if _iswin;
then
  # scoop setup: Python path
  local _scoop=$(cygpath -u "${SCOOP}")
  local python_root="${_scoop}/apps/python/current"
  path=( \
    "${_scoop}/shims" \
    "${python_root}/Script" \
    "${python_root}/" \
    $path)
fi
export PATH

# Nix ##########################################################################
if [ -e ${HOME}/.nix-profile/etc/profile.d/nix.sh ]; then
  . ${HOME}/.nix-profile/etc/profile.d/nix.sh;
fi

# zoxide (better cd) ###########################################################
if _command_exists zoxide;
then
  eval "$(zoxide init zsh)"
else
  _warnmsg "Consider installing zoxide"
fi

# starship (prompt) ############################################################
if _command_exists starship;
then
  eval "$(starship init zsh)"
else
  _warnmsg "Consider installing starship"
fi

# FzF (fuzzy-search) ###########################################################
if [ -f ~/.fzf.zsh ];
then
  source ~/.fzf.zsh
else
  _warnmsg "Consider installing FzF"
fi

# ##############################################################################

# prompt user for global upgrade
maybeupdate
