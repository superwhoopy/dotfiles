# vim:set ft=ps1:

# This scipt is idempotent: all of these comment succed even if they have
# already been executed once.

# safe PowerShell mode
$ErrorActionPreference = "Stop"
Set-StrictMode -Version Latest

function ChezMoi-Echo {
  param (
    $Message
  )
  $color = "DarkBlue"
  Write-Output ""
  Write-Host "************************************************" -ForegroundColor $color
  Write-Host " CHEZMOI - $Message" -ForegroundColor $color
  Write-Host "************************************************" -ForegroundColor $color
  Write-Output ""
}

function Write-Blue {
  param ( $Message )
  $color = "DarkBlue"
  Write-Host $Message -ForegroundColor $color
}

ChezMoi-Echo "Initial setup script"

################################################################################
# SCOOP
################################################################################
# run scoop prefix git: if it does not return anything, assume this is a fresh install
scoop prefix git
if($?) {
  Write-Blue "git installed through scoop: skipping scoop initial setup"
} else {
  # install scoop base packages
  Write-Blue "Initializing scoop packages"
  # install and enable aria2
  scoop install aria2
  scoop config aria2-enabled true
  scoop config aria2-warning-enabled false

  # add buckets - requires git
  scoop install git
  {{- range .scoop.buckets }}
  scoop bucket add {{ . }}
  {{- end }}

  # install age to decipher the encryption key
  scoop install age

  # install sudo, so that regular update scripts can run
  scoop install sudo
}


################################################################################
# MSYS2
################################################################################
try {
  Get-Command "ucrt64" -ErrorAction Stop
  Write-Blue "Command 'ucrt64' exists: skipping msys2 install"
} catch {
  Write-Blue "Installing msys2"

  # install msys2
  scoop install msys2
  # link home directory
  $msys2_prefix = scoop prefix msys2
  $msys2_home = "$msys2_prefix\home\$($env:USERNAME.ToLower())"
  cmd /c "mklink /J `"$msys2_home`" `"$env:USERPROFILE`""

  # setup /etc/nsswitch.conf
  $nsswitch_conf = Join-Path $msys2_prefix "etc\nsswitch.conf"
  $new_nsswitch_conf = $(Get-Content $nsswitch_conf) `
    -replace '^db_home:\s*cygwin\s*desc$', 'db_home: windows cygwin desc'
  $new_nsswitch_conf | Set-Content $nsswitch_conf

  # first launch of msys2 + upgrade (twice, to account for full system upgrade)
  msys2 -no-start -c 'echo MSYS2 init. complete'
  $sh = Join-Path $msys2_prefix "usr\bin\sh"
  & $sh --noprofile --norc -c "/usr/bin/pacman -Syu --noconfirm"
  & $sh --noprofile --norc -c "/usr/bin/pacman -Syu --noconfirm"
}


################################################################################
# Decipher age encryption key
################################################################################
# TODO


################################################################################
# WSL
################################################################################
# TODO: really want to do that?

# try {
#   $wsl = Get-Command "wsl" -ErrorAction Stop
#   ChezMoi-Echo "Setting up WSL"
#   wsl --install -d Ubuntu --no-launch
# } catch {
#   ChezMoi-Echo "Command 'wsl' unavailable: skipping"
# }
