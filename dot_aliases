#!/bin/bash

function _iswin() {
  [ "${OS-'None'}" = "Windows_NT" ]
}

# temporary hack, to use scoop python39 by default with Windows
_iswin && alias python3=python39

################################################################################
# USUAL STUFF
################################################################################
_iswin && {                                                                 \
  alias pkill='tskill';                                                     \
}

alias l="exa --icons --group-directories-first"
alias ll="exa -al --icons --group-directories-first"
alias la="exa -a --git --icons --group-directories-first"

alias grep='grep --color'
alias du='/usr/bin/du -hc --max-depth=1'
alias df='df -h'
alias shred='shred -u'
alias hd=hexdump
alias tree='tree -C' # colors on

alias aupdate='sudo apt update'
alias ainstall='sudo apt install'

alias pipupgrade='python -m pip install --upgrade pip'
alias pip='python -m pip'
alias pip3='python3 -m pip'

################################################################################
# ALTERNATIVES
################################################################################

alias cat=bat

################################################################################
# VIM / GVIM
################################################################################
# use tabs to open multiple files with vim
alias vim='nvim -p'


################################################################################
# PERSONAL SHORTCUTS
################################################################################
# Short date
alias sdate='date +%d.%m.%y-%H.%M.%S'

alias tmux='tmux attach'

alias livelog='watch --color -n 2 git --no-pager lag --color=always -35'

alias pytest='pytest -v'

alias psytags='ctags -R --map-c=+.psy'

# TLA+ tools
if _iswin; then
  _tlatools="$(cygpath -m ${SCOOP})/apps/tlaplus-toolbox/current/tla2tools.jar"
else
  _tlatools="${HOME}/.local/share/applications/tla2tools.jar"
fi
alias tlc="java -XX:+UseParallelGC -jar ${_tlatools} -workers auto"
alias pcal="java -cp ${_tlatools} pcal.trans"
alias tla2tex="java -cp ${_tlatools} tla2tex.TLA -shade"

# psyko
if _iswin; then
  function givemepsyko() {
    local ksdir=${KRONOSAFE_INSTALL_DIR}
    local version="9.5.0"

    local psykover="psyko-${version}"
    local ksimver="ksim-${version}"
    local psykopath="${ksdir}/${psykover}/bin"

    _pathidx=${path[(Ie)${psykopath}]}

    if [[ ${_pathidx} = 0 ]];
    then
      # not in path: add it
      path=(${psykopath} $path)
      export PATH
      alias psyko-ksim="psyko -p ksim --kernel-dir=${ksdir}/${ksimver}"
      echo "Added ${psykover} to PATH"
    else
      # remove from path
      path[${_pathidx}]=()
      export PATH
      unalias psyko-ksim
      echo "Removed ${psykover} from PATH"
    fi
  }
fi

################################################################################
# FUNCTIONS
################################################################################
# alias for "cd" then "ls"
function c {
    if [[ -z $* ]];
    then
        cd && l;
    else
        cd "$*" && l ;
    fi
}

# Run a command and issue a notification when it completes. Requires notify-py
# and Python
function notify() {
  ( ${*} && notifypy --title "✅ Command successful" --message "${*}" \
                     --applicationName "Console notify" ) || \
  notifypy --title "❌ Command failed" --message "${*}" \
           --applicationName "Console notify"
}

################################################################################
# UPDATE TOOLS
################################################################################

function _confupdate() {
  for dir in ~/.vim ~/.config/config;
  do
    echo "updating git repo in ${dir}"
    ( git -C ${dir} pff || \
      _errormsg "Failed to fast-forward pull git repository!" ) &

    if [ "$(git -C ${dir} status --porcelain)" ]; then
      _warnmsg "Warning: git repo ${dir} is not clean. Wanna push?"
    fi
    echo
  done
  wait

  # each of the following lines is executed in parallel
  { cat << EOF
  echo "\nupdating nvim plugins..."; command -v nvim && nvim --headless "+Lazy! sync" +qa
  echo "\nupdating nodejs packages"; command -v npm  && npm update -g
  echo "\nupdating Python packages"; command -v pipx && pipx upgrade-all
  echo "\nupdating Ruby packages";   command -v gem  && gem update
EOF
  } | parallel --verbose

}

function _pacmanupdate() (
  set -euo pipefail
  pacman="pacman"
  ${pacman} -Syu --noconfirm # update all
  orphans=$(${pacman} -Qtdq || exit 0)
  [ "${orphans}" ] && { \
    echo ${orphans} | xargs ${pacman} -Rns --noconfirm \
  }
  ${pacman} -Sc --noconfirm # clear cache
)

function _scoopupdate() (
  set -euo pipefail
  scoop update
  scoop update "*"
  scoop cleanup "*"
  scoop cache rm -a
)

# update windows tools
function _wupdate() (
  _iswin || {
    _warnmsg "You're not on Windows, dumbass!"; return
  }
  _pacmanupdate
  _scoopupdate
)

function _nuxupdate() (
  set -euo pipefail

  _command_exists apt && (
    sudo -- sh -c 'apt update && apt upgrade -y && apt autoclean --yes && apt autoremove --purge --yes'
  )

  _command_exists pamac && pamac upgrade --aur --no-confirm

  _command_exists flatpak && (
    echo "Running flatpak update..."
    flatpak update --assumeyes --noninteractive
    flatpak uninstall --assumeyes --unused
  )

  _command_exists brew && (
    echo "Running brew upgrade..."
    brew upgrade
  )
)


function fullupdate() (
  set -euo pipefail
  _lastupdate_file="${HOME}/.config/.last_update"
  _pendingupdate_lockfile="${HOME}/.config/.pending_fullupdate"

  touch ${_pendingupdate_lockfile}
  if _iswin;
  then
    _wupdate
  else
    _nuxupdate
  fi

  _confupdate

  touch "${_lastupdate_file}"
  rm -f "${_pendingupdate_lockfile}"
)

function maybeupdate()
{
  python3 "${HOME}/.config/config/update.py" || fullupdate
}

################################################################################
